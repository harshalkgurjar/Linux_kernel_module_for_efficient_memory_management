Transactional NP-Heap
###Overview

Investigated a potential design that supports parallel accesses among concurrent processes more efficiently. This design leverages the concept of "transactional memory". Instead of using locks, the programmer declares "atomic regions" in the transactional memory programming model. All memory accesses in the atomic region are considered as a single transaction. A transaction can commit, i.e. present its updates, to the underlying memory device only if no other transactions have changed any value the transaction depends on. If the transaction cannot commit, the transaction must be aborted and restarted.

In order to check if a transaction can be committed or not, one way is to maintain a "version" number for data stored in the memory device. Whenever your program start a transaction or say, entering an atomic region, you should obtain a "transaction id" for this ongoing transaction. At the end of the transaction, if the version of all values that the transaction read remains the same as the beginning of the transaction, meaning that the results generated from the transaction are still based on valid input data, the transaction can commit all the value it modified as a new version of the data to the memory device. Otherwise, the transaction should be aborted and restart from the beginning. 

Used the NPHeap pseudo device as the data storage. Implemented another kernel module to control the access to NPHeap. This kernel module is called TNPHeap. NPHeap obtains a version number whenever the application needs to start a new transaction. It buffers uncommitted data in user-space memory. Once the application requests to commit, the library verifies the version number of the referenced data. If the transaction is ready to commit, all buffered data can be presented in the NPHeap, otherwise, the library just discards all buffered data and restart the transaction.

###Objective

* Learning more about parallel processes
* Learning the concept of transactional memory
* Learning how user-space library works together with kernel modules
* Learning how to implement a handler
* Learning how memory protection works

### Files description
1. kernel_module -- the directory where we have the kernel module code.

2. library -- the directory of the user-space library code.

3. benchmark -- the directory with a sample program using this kernel and a validator to examine the result.

### Setup

1) Type "make" to compile the kernel module
2) "sudo make install" to install headers and the module in the right place. You should be able to find an tnpheap.ko if your compilation succeeds and this is the binary of the tnpheap kernel module. 
3) To get this kernel module loaded into the system kernel, try "sudo insmod tnpheap.ko". Upon success, you should find an "tnpheap" device file under /dev directory in your linux system. 
4) By default, this device may not be available for non-root users. Therefore, you need to use "sudo chmod 777 /dev/tnpheap" command to make it accessible by anyone and any process in the system. 
5) If you don't want this device to be available in the system anymore, you can use "sudo rmmod tnpheap" to remove this device.
6) Now, you can navigate to the library path and again use "make" to generate this dynamic link library. You need to then use "sudo make install" to make this library publicly available for the system. You should read the code and figure out how this library interacts with the kernel module. 
7) Before you go and test your applications, always make sure that npheap device is present in your system.
8) Finally, you can now go to the benchmark directory to get the benchmark and validate programs compiled. The benchmark and validate programs have some parameters. The benchmark program generates random values and write them to npheap. The validate program gets values from npheap and validates if they are consistent with what we are supposed to write. You may go into the benchmark.c or validate.c to understand the meaning of them. You should also use and read "test.sh" file to see how the whole framework work together. 


### Functions descriptions

1. Implementing the tnpheap kernel module: 

- tnpheap_start_tx: This function indicates the beginning of a new transaction and returns a transaction number to the requesting process.

- tnpheap_get_version: This function should return the version number of the object identified by the offset in npheap

- tnpheap_commit:  This function should update the version number of the object if a new version of the object is committed.

2. Implement the user-space library:
- tnpheap_get_version: reports the current version of a specific object for the user program

- handler: a memory access exception handler that you should define whenever a SIGSEGV (segmentation fault) exception occurs

- tnpheap_alloc: a function that allocates/mmaps an object from NPHeap to user-space address. You might need to consider creating a buffer for uncommitted data when this function is called.

- tnpheap_start_tx: This function should work with the TNPHeap kernel module to start a transaction.

- tnpheap_commit: This function should return a 0 when the transaction commits successfully. It should return 1 if the transaction is aborted. You might want to check if the transaction can commit and perform the atomic commit operation in this function.

3. Test the developed module